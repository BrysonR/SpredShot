/**
 * @emails dmitrys@fb.com
 */

/*jshint evil:true*/
/*jshint -W117*/

require('mock-modules').autoMockOff();

describe('es6-destructuring-visitors', function() {
  var transformFn;

  var destructuringVisitors;
  var conciseMethodVisitors;
  var shortObjectsVisitors;
  var reservedWordsVisitors;
  var restParamVisitors;
  var classVisitorsVisitors;
  var arrowFunctionVisitors;

  var visitors;

  beforeEach(function() {
    require('mock-modules').dumpCache();
    transformFn = require('../../src/jstransform').transform;

    destructuringVisitors = require('../es6-destructuring-visitors').visitorList;
    conciseMethodVisitors = require('../es6-object-concise-method-visitors').visitorList;
    shortObjectsVisitors = require('../es6-object-short-notation-visitors').visitorList;
    reservedWordsVisitors = require('../reserved-words-visitors').visitorList;
    restParamVisitors = require('../es6-rest-param-visitors').visitorList;
    classVisitorsVisitors = require('../es6-class-visitors').visitorList;
    arrowFunctionVisitors = require('../es6-arrow-function-visitors').visitorList;

    visitors = destructuringVisitors.concat(
      conciseMethodVisitors,
      shortObjectsVisitors,
      restParamVisitors,
      classVisitorsVisitors,
      arrowFunctionVisitors,
      reservedWordsVisitors
    );
  });

  function transform(code) {
    return transformFn(visitors, code).code;
  }

  function expectTransform(code, result) {
    expect(transform(code)).toEqual(result);
  }

  it('should handle simple object pattern', function() {
    var code = transform([
      'var {x, y} = {x: 10, y: 20};',
      '(x + y);'
    ].join('\n'));

    expect(eval(code)).toEqual(30);
  });

  it('should handle literal property names', function() {
    var code = transform([
      'var {x, "y y": yy, 0: z} = {x: 10, "y y": 20, 0: 30};',
      '([x, yy, z]);'
    ].join('\n'));

    expect(eval(code)).toEqual([10, 20, 30]);
  });

  it('should handle array pattern assignment expression', function() {
    var code = transform([
      'var x = 10, y = 20;',
      '[x, y] = [y, x];',
      '([x, y]);'
    ].join('\n'));

    expect(eval(code)).toEqual([20, 10]);
  });

  it('should should not redeclare vars with assignment expression', function() {
    var code = transform([
      'var x = 10, y = 20;',
      '(function() {',
      '  [x, y] = [y, x];',
      '})();',
      '([x, y]);'
    ].join('\n'));

    expect(eval(code)).toEqual([20, 10]);
  });

  it('should handle object pattern assignment expression', function() {
    var code = transform([
      'var x = 10, y = 20;',
      '({x, y} = {y, x});',
      '({x, y});'
    ].join('\n'));

    expect(eval(code)).toEqual({x: 10, y: 20});
  });

  it('should destructure result of a function', function() {
    var code = transform([
      'var [x, y] = (function({x, y}) { return [x, y]; })({x: 1, y: 2});',
      '([x, y]);'
    ].join('\n'));

    expect(eval(code)).toEqual([1, 2]);
  });

  it('should handle skipped array elements', function() {
    var code = transform([
      'var [x, , y] = [1, 2, 3];',
      '([x, y]);'
    ].join('\n'));

    expect(eval(code)).toEqual([1, 3]);
  });

  it('should handle rest elements of an array', function() {
    var code = transform([
      'var [x, ...xs] = [1, 2, 3];'
    ].join('\n'));

    eval(code);

    expect(x).toEqual(1);
    expect(xs).toEqual([2, 3]);
  });

  it('should swap two variables w/o third using pattern', function() {
    var code = transform([
      'var x = 10, y = 20;',
      'var [x, y] = [y, x];',
      '([x, y]);'
    ].join('\n'));

    expect(eval(code)).toEqual([20, 10]);
  });

  it('should transform complex pattern argument', function() {
    var code = transform([
      'function init(user, {ip, coords: [x, y], port}) {',
      '  return [user, ip, x, y, port].join(", ");',
      '}'
    ].join('\n'));

    eval(code);

    expect(init(
      'John Doe', {
        ip: '127.0.0.1',
        coords: [1, 2],
        port: 8080
      }
    )).toBe('John Doe, 127.0.0.1, 1, 2, 8080');
  });

  it('should work with rest 